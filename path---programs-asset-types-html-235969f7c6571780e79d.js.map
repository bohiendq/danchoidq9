{"version":3,"sources":["webpack:///path---programs-asset-types-html-235969f7c6571780e79d.js","webpack:///./.cache/json/programs-asset-types-html.json"],"names":["webpackJsonp","728","module","exports","data","markdownRemark","html","frontmatter","path","id","title","description","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,utEAAAC,aAA6uEC,KAAA,6BAAAC,GAAA,uBAAAC,MAAA,cAAAC,YAAA,QAA2GC","file":"path---programs-asset-types-html-235969f7c6571780e79d.js","sourcesContent":["webpackJsonp([89528621277042],{\n\n/***/ 728:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>HackerOne provides functionality to allow you to define your program's scope by listing assets that are considered in or out of scope for your program.</p>\\n<p>HackerOne supports the following types of assets:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Type</th>\\n<th>Details</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>CIDR</td>\\n<td>Any valid IPv4 or IPv6 CIDR range. \\n<br>\\nExamples: \\n<ul>\\n<li>\\n172.200.0.0/16\\n</li>\\n<li>\\n2001:db8::/48\\n</li>\\n<li>\\nfe80:0000:0000:0000:0204:61ff:fe9d:f156/3\\n</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>URL</td>\\n<td>A valid URI, per our uri_validator.rb (which mostly relies on the standard ruby library “uri” and matches the official URI RFC spec) \\n<br>\\nExamples: \\n<ul>\\n<li>\\n*.hackerone.com\\n</li>\\n<li>\\n<a href=\\\"https://maps.google.com\\\">https://maps.google.com</a>\\n</li>\\n<li>\\nmywebsite.com/cool\\n</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Apple Store App ID</td>\\n<td>A standard apple identifier. \\n<br>\\nExample: \\n<ul>\\n<li>\\ncom.domainname.appname\\n</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Testflight</td>\\n<td>A standard apple identifier. \\n<br>\\n(\\n<a href=\\\"https://developer.apple.com/testflight/\\\">https://developer.apple.com/testflight/</a>\\n) \\n<br>\\nExample: \\n<ul>\\n<li>\\ncom.domainname.appme\\n</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Other .ipa</td>\\n<td>A standard apple identifier. \\n<br>\\n Example: \\n<ul>\\n<li>\\ncom.domainname.appme\\n</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Google Play</td>\\n<td>A standard APK identifier. \\n<br>\\n(\\n<a href=\\\"https://developer.android.com/studio/build/application-id.html\\\">https://developer.android.com/studio/build/application-id.html</a>\\n) \\n<br>\\nExample: \\n<ul>\\n<li>\\ncom.domainname.appme\\n</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Windows Store App</td>\\n<td>Either a store ID like '9WZDNCRFHVJL' or an identifier name like 'Microsoft.SDKSamples.ApplicationDataSample' \\n<br>\\nExamples: \\n<ul>\\n<li>\\n9WZDNCRFHVJL\\n</li>\\n<li>\\nMicrosoft.SDKSamples.ApplicationDataSample\\n</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Source Code, Downloadable Executables and Hardware identifiers are not validated. You are free to use this in whatever suits your naming conventions. </p>\\n<p>You can edit your scopes in your settings under program's <strong>Settings > Program > Scope</strong>. </p>\",\"frontmatter\":{\"path\":\"/programs/asset-types.html\",\"id\":\"programs/asset-types\",\"title\":\"Asset Types\",\"description\":null}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---programs-asset-types-html-235969f7c6571780e79d.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>HackerOne provides functionality to allow you to define your program's scope by listing assets that are considered in or out of scope for your program.</p>\\n<p>HackerOne supports the following types of assets:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Type</th>\\n<th>Details</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>CIDR</td>\\n<td>Any valid IPv4 or IPv6 CIDR range. \\n<br>\\nExamples: \\n<ul>\\n<li>\\n172.200.0.0/16\\n</li>\\n<li>\\n2001:db8::/48\\n</li>\\n<li>\\nfe80:0000:0000:0000:0204:61ff:fe9d:f156/3\\n</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>URL</td>\\n<td>A valid URI, per our uri_validator.rb (which mostly relies on the standard ruby library “uri” and matches the official URI RFC spec) \\n<br>\\nExamples: \\n<ul>\\n<li>\\n*.hackerone.com\\n</li>\\n<li>\\n<a href=\\\"https://maps.google.com\\\">https://maps.google.com</a>\\n</li>\\n<li>\\nmywebsite.com/cool\\n</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Apple Store App ID</td>\\n<td>A standard apple identifier. \\n<br>\\nExample: \\n<ul>\\n<li>\\ncom.domainname.appname\\n</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Testflight</td>\\n<td>A standard apple identifier. \\n<br>\\n(\\n<a href=\\\"https://developer.apple.com/testflight/\\\">https://developer.apple.com/testflight/</a>\\n) \\n<br>\\nExample: \\n<ul>\\n<li>\\ncom.domainname.appme\\n</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Other .ipa</td>\\n<td>A standard apple identifier. \\n<br>\\n Example: \\n<ul>\\n<li>\\ncom.domainname.appme\\n</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Google Play</td>\\n<td>A standard APK identifier. \\n<br>\\n(\\n<a href=\\\"https://developer.android.com/studio/build/application-id.html\\\">https://developer.android.com/studio/build/application-id.html</a>\\n) \\n<br>\\nExample: \\n<ul>\\n<li>\\ncom.domainname.appme\\n</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Windows Store App</td>\\n<td>Either a store ID like '9WZDNCRFHVJL' or an identifier name like 'Microsoft.SDKSamples.ApplicationDataSample' \\n<br>\\nExamples: \\n<ul>\\n<li>\\n9WZDNCRFHVJL\\n</li>\\n<li>\\nMicrosoft.SDKSamples.ApplicationDataSample\\n</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Source Code, Downloadable Executables and Hardware identifiers are not validated. You are free to use this in whatever suits your naming conventions. </p>\\n<p>You can edit your scopes in your settings under program's <strong>Settings > Program > Scope</strong>. </p>\",\"frontmatter\":{\"path\":\"/programs/asset-types.html\",\"id\":\"programs/asset-types\",\"title\":\"Asset Types\",\"description\":null}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/programs-asset-types-html.json\n// module id = 728\n// module chunks = 89528621277042"],"sourceRoot":""}