{"version":3,"sources":["webpack:///./node_modules/is_js/is.js"],"names":["global","__WEBPACK_AMD_DEFINE_RESULT__","root","__webpack_require__","this","undefined","is","VERSION","not","all","any","toString","Object","prototype","slice","Array","hasOwnProperty","func","apply","call","arguments","params","getParams","length","i","comparator","<","a","b","<=",">",">=","compareVersion","version","range","string","n","match","NaN","op","args","array","value","isArray","date","domNode","object","nodeType","error","json","nan","number","regexp","sameType","other","tag","api","windowObject","empty","getOwnPropertyNames","existy","falsy","truthy","above","min","decimal","equal","even","finite","isFinite","infinite","Infinity","integer","negative","odd","positive","under","max","within","regexes","affirmative","alphaNumeric","caPostalCode","creditCard","dateString","email","eppPhone","hexadecimal","hexColor","ipv4","ipv6","nanpPhone","socialSecurityNumber","timeString","ukPostCode","url","usZipCode","regexpCheck","test","ip","capitalized","words","split","word","chr","charAt","toUpperCase","endWith","target","position","indexOf","include","lowerCase","toLowerCase","palindrome","replace","half","Math","floor","space","charCode","charCodeAt","startWith","upperCase","days","months","day","getDay","dayLightSavingTime","january","Date","getFullYear","july","stdTimezoneOffset","getTimezoneOffset","future","now","getTime","inDateRange","start","end","stamp","inLastMonth","setMonth","getMonth","inLastWeek","setDate","getDate","inLastYear","setFullYear","inNextMonth","inNextWeek","inNextYear","leapYear","year","month","past","quarterOfYear","quarter","today","todayString","toDateString","tomorrow","tomorrowString","weekend","weekday","yesterday","yesterdayString","freeGlobal","freeSelf","self","thisGlobal","Function","document","previousIs","navigator","appVersion","userAgent","vendor","android","androidPhone","androidTablet","blackberry","chrome","desktop","mobile","tablet","edge","firefox","ie","ios","iphone","ipad","ipod","linux","mac","windowsPhone","offline","online","onLine","opera","phantom","safari","windowsTablet","touchDevice","DocumentTouch","windows","propertyCount","count","property","propertyDefined","inArray","sorted","sign","predicate","options","option","interfaces","setInterfaces","setNamespace","setRegexp","name","r","factory","exports","module"],"mappings":"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","file":"1-4beb925ccbe99aac4b24.js","sourcesContent":["require(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\n/*!\n * is.js 0.8.0\n * Author: Aras Atasaygin\n */\n// AMD with global, Node, or global\n;\n\n(function (root, factory) {\n  // eslint-disable-line no-extra-semi\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(function () {\n      // Also create a global in case some scripts\n      // that are loaded still are looking for\n      // a global even when an AMD loader is in use.\n      return root.is = factory();\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is self)\n    root.is = factory();\n  }\n})(this, function () {\n  // Baseline\n\n  /* -------------------------------------------------------------------------- */\n  // define 'is' object and current version\n  var is = {};\n  is.VERSION = '0.8.0'; // define interfaces\n\n  is.not = {};\n  is.all = {};\n  is.any = {}; // cache some methods to call later on\n\n  var toString = Object.prototype.toString;\n  var slice = Array.prototype.slice;\n  var hasOwnProperty = Object.prototype.hasOwnProperty; // helper function which reverses the sense of predicate result\n\n  function not(func) {\n    return function () {\n      return !func.apply(null, slice.call(arguments));\n    };\n  } // helper function which call predicate function per parameter and return true if all pass\n\n\n  function all(func) {\n    return function () {\n      var params = getParams(arguments);\n      var length = params.length;\n\n      for (var i = 0; i < length; i++) {\n        if (!func.call(null, params[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  } // helper function which call predicate function per parameter and return true if any pass\n\n\n  function any(func) {\n    return function () {\n      var params = getParams(arguments);\n      var length = params.length;\n\n      for (var i = 0; i < length; i++) {\n        if (func.call(null, params[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n  } // build a 'comparator' object for various comparison checks\n\n\n  var comparator = {\n    '<': function _(a, b) {\n      return a < b;\n    },\n    '<=': function _(a, b) {\n      return a <= b;\n    },\n    '>': function _(a, b) {\n      return a > b;\n    },\n    '>=': function _(a, b) {\n      return a >= b;\n    } // helper function which compares a version to a range\n\n  };\n\n  function compareVersion(version, range) {\n    var string = range + '';\n    var n = +(string.match(/\\d+/) || NaN);\n    var op = string.match(/^[<>]=?|/)[0];\n    return comparator[op] ? comparator[op](version, n) : version == n || n !== n;\n  } // helper function which extracts params from arguments\n\n\n  function getParams(args) {\n    var params = slice.call(args);\n    var length = params.length;\n\n    if (length === 1 && is.array(params[0])) {\n      // support array\n      params = params[0];\n    }\n\n    return params;\n  } // Type checks\n\n  /* -------------------------------------------------------------------------- */\n  // is a given value Arguments?\n\n\n  is.arguments = function (value) {\n    // fallback check is for IE\n    return toString.call(value) === '[object Arguments]' || value != null && typeof value === 'object' && 'callee' in value;\n  }; // is a given value Array?\n\n\n  is.array = Array.isArray || function (value) {\n    // check native isArray first\n    return toString.call(value) === '[object Array]';\n  }; // is a given value Boolean?\n\n\n  is[\"boolean\"] = function (value) {\n    return value === true || value === false || toString.call(value) === '[object Boolean]';\n  }; // is a given value Char?\n\n\n  is[\"char\"] = function (value) {\n    return is.string(value) && value.length === 1;\n  }; // is a given value Date Object?\n\n\n  is.date = function (value) {\n    return toString.call(value) === '[object Date]';\n  }; // is a given object a DOM node?\n\n\n  is.domNode = function (object) {\n    return is.object(object) && object.nodeType > 0;\n  }; // is a given value Error object?\n\n\n  is.error = function (value) {\n    return toString.call(value) === '[object Error]';\n  }; // is a given value function?\n\n\n  is['function'] = function (value) {\n    // fallback check is for IE\n    return toString.call(value) === '[object Function]' || typeof value === 'function';\n  }; // is given value a pure JSON object?\n\n\n  is.json = function (value) {\n    return toString.call(value) === '[object Object]';\n  }; // is a given value NaN?\n\n\n  is.nan = function (value) {\n    // NaN is number :) Also it is the only value which does not equal itself\n    return value !== value;\n  }; // is a given value null?\n\n\n  is['null'] = function (value) {\n    return value === null;\n  }; // is a given value number?\n\n\n  is.number = function (value) {\n    return is.not.nan(value) && toString.call(value) === '[object Number]';\n  }; // is a given value object?\n\n\n  is.object = function (value) {\n    return Object(value) === value;\n  }; // is a given value RegExp?\n\n\n  is.regexp = function (value) {\n    return toString.call(value) === '[object RegExp]';\n  }; // are given values same type?\n  // prevent NaN, Number same type check\n\n\n  is.sameType = function (value, other) {\n    var tag = toString.call(value);\n\n    if (tag !== toString.call(other)) {\n      return false;\n    }\n\n    if (tag === '[object Number]') {\n      return !is.any.nan(value, other) || is.all.nan(value, other);\n    }\n\n    return true;\n  }; // sameType method does not support 'all' and 'any' interfaces\n\n\n  is.sameType.api = ['not']; // is a given value String?\n\n  is.string = function (value) {\n    return toString.call(value) === '[object String]';\n  }; // is a given value undefined?\n\n\n  is.undefined = function (value) {\n    return value === void 0;\n  }; // is a given value window?\n  // setInterval method is only available for window object\n\n\n  is.windowObject = function (value) {\n    return value != null && typeof value === 'object' && 'setInterval' in value;\n  }; // Presence checks\n\n  /* -------------------------------------------------------------------------- */\n  //is a given value empty? Objects, arrays, strings\n\n\n  is.empty = function (value) {\n    if (is.object(value)) {\n      var length = Object.getOwnPropertyNames(value).length;\n\n      if (length === 0 || length === 1 && is.array(value) || length === 2 && is.arguments(value)) {\n        return true;\n      }\n\n      return false;\n    }\n\n    return value === '';\n  }; // is a given value existy?\n\n\n  is.existy = function (value) {\n    return value != null;\n  }; // is a given value falsy?\n\n\n  is.falsy = function (value) {\n    return !value;\n  }; // is a given value truthy?\n\n\n  is.truthy = not(is.falsy); // Arithmetic checks\n\n  /* -------------------------------------------------------------------------- */\n  // is a given number above minimum parameter?\n\n  is.above = function (n, min) {\n    return is.all.number(n, min) && n > min;\n  }; // above method does not support 'all' and 'any' interfaces\n\n\n  is.above.api = ['not']; // is a given number decimal?\n\n  is.decimal = function (n) {\n    return is.number(n) && n % 1 !== 0;\n  }; // are given values equal? supports numbers, strings, regexes, booleans\n  // TODO: Add object and array support\n\n\n  is.equal = function (value, other) {\n    // check 0 and -0 equity with Infinity and -Infinity\n    if (is.all.number(value, other)) {\n      return value === other && 1 / value === 1 / other;\n    } // check regexes as strings too\n\n\n    if (is.all.string(value, other) || is.all.regexp(value, other)) {\n      return '' + value === '' + other;\n    }\n\n    if (is.all[\"boolean\"](value, other)) {\n      return value === other;\n    }\n\n    return false;\n  }; // equal method does not support 'all' and 'any' interfaces\n\n\n  is.equal.api = ['not']; // is a given number even?\n\n  is.even = function (n) {\n    return is.number(n) && n % 2 === 0;\n  }; // is a given number finite?\n\n\n  is.finite = isFinite || function (n) {\n    return is.not.infinite(n) && is.not.nan(n);\n  }; // is a given number infinite?\n\n\n  is.infinite = function (n) {\n    return n === Infinity || n === -Infinity;\n  }; // is a given number integer?\n\n\n  is.integer = function (n) {\n    return is.number(n) && n % 1 === 0;\n  }; // is a given number negative?\n\n\n  is.negative = function (n) {\n    return is.number(n) && n < 0;\n  }; // is a given number odd?\n\n\n  is.odd = function (n) {\n    return is.number(n) && n % 2 === 1;\n  }; // is a given number positive?\n\n\n  is.positive = function (n) {\n    return is.number(n) && n > 0;\n  }; // is a given number above maximum parameter?\n\n\n  is.under = function (n, max) {\n    return is.all.number(n, max) && n < max;\n  }; // least method does not support 'all' and 'any' interfaces\n\n\n  is.under.api = ['not']; // is a given number within minimum and maximum parameters?\n\n  is.within = function (n, min, max) {\n    return is.all.number(n, min, max) && n > min && n < max;\n  }; // within method does not support 'all' and 'any' interfaces\n\n\n  is.within.api = ['not']; // Regexp checks\n\n  /* -------------------------------------------------------------------------- */\n  // Steven Levithan, Jan Goyvaerts: Regular Expressions Cookbook\n  // Scott Gonzalez: Email address validation\n  // dateString match m/d/yy and mm/dd/yyyy, allowing any combination of one or two digits for the day and month, and two or four digits for the year\n  // eppPhone match extensible provisioning protocol format\n  // nanpPhone match north american number plan format\n  // time match hours, minutes, and seconds, 24-hour clock\n\n  var regexes = {\n    affirmative: /^(?:1|t(?:rue)?|y(?:es)?|ok(?:ay)?)$/,\n    alphaNumeric: /^[A-Za-z0-9]+$/,\n    caPostalCode: /^(?!.*[DFIOQU])[A-VXY][0-9][A-Z]\\s?[0-9][A-Z][0-9]$/,\n    creditCard: /^(?:(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11}))$/,\n    dateString: /^(1[0-2]|0?[1-9])([\\/-])(3[01]|[12][0-9]|0?[1-9])(?:\\2)(?:[0-9]{2})?[0-9]{2}$/,\n    email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n    // eslint-disable-line no-control-regex\n    eppPhone: /^\\+[0-9]{1,3}\\.[0-9]{4,14}(?:x.+)?$/,\n    hexadecimal: /^(?:0x)?[0-9a-fA-F]+$/,\n    hexColor: /^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/,\n    ipv4: /^(?:(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$/,\n    ipv6: /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i,\n    nanpPhone: /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,\n    socialSecurityNumber: /^(?!000|666)[0-8][0-9]{2}-?(?!00)[0-9]{2}-?(?!0000)[0-9]{4}$/,\n    timeString: /^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$/,\n    ukPostCode: /^[A-Z]{1,2}[0-9RCHNQ][0-9A-Z]?\\s?[0-9][ABD-HJLNP-UW-Z]{2}$|^[A-Z]{2}-?[0-9]{4}$/,\n    url: /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/i,\n    usZipCode: /^[0-9]{5}(?:-[0-9]{4})?$/\n  };\n\n  function regexpCheck(regexp, regexes) {\n    is[regexp] = function (value) {\n      return regexes[regexp].test(value);\n    };\n  } // create regexp checks methods from 'regexes' object\n\n\n  for (var regexp in regexes) {\n    if (regexes.hasOwnProperty(regexp)) {\n      regexpCheck(regexp, regexes);\n    }\n  } // simplify IP checks by calling the regex helpers for IPv4 and IPv6\n\n\n  is.ip = function (value) {\n    return is.ipv4(value) || is.ipv6(value);\n  }; // String checks\n\n  /* -------------------------------------------------------------------------- */\n  // is a given string or sentence capitalized?\n\n\n  is.capitalized = function (string) {\n    if (is.not.string(string)) {\n      return false;\n    }\n\n    var words = string.split(' ');\n\n    for (var i = 0; i < words.length; i++) {\n      var word = words[i];\n\n      if (word.length) {\n        var chr = word.charAt(0);\n\n        if (chr !== chr.toUpperCase()) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }; // is string end with a given target parameter?\n\n\n  is.endWith = function (string, target) {\n    if (is.not.string(string)) {\n      return false;\n    }\n\n    target += '';\n    var position = string.length - target.length;\n    return position >= 0 && string.indexOf(target, position) === position;\n  }; // endWith method does not support 'all' and 'any' interfaces\n\n\n  is.endWith.api = ['not']; // is a given string include parameter target?\n\n  is.include = function (string, target) {\n    return string.indexOf(target) > -1;\n  }; // include method does not support 'all' and 'any' interfaces\n\n\n  is.include.api = ['not']; // is a given string all lowercase?\n\n  is.lowerCase = function (string) {\n    return is.string(string) && string === string.toLowerCase();\n  }; // is a given string palindrome?\n\n\n  is.palindrome = function (string) {\n    if (is.not.string(string)) {\n      return false;\n    }\n\n    string = string.replace(/[^a-zA-Z0-9]+/g, '').toLowerCase();\n    var length = string.length - 1;\n\n    for (var i = 0, half = Math.floor(length / 2); i <= half; i++) {\n      if (string.charAt(i) !== string.charAt(length - i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }; // is a given value space?\n  // horizantal tab: 9, line feed: 10, vertical tab: 11, form feed: 12, carriage return: 13, space: 32\n\n\n  is.space = function (value) {\n    if (is.not[\"char\"](value)) {\n      return false;\n    }\n\n    var charCode = value.charCodeAt(0);\n    return charCode > 8 && charCode < 14 || charCode === 32;\n  }; // is string start with a given target parameter?\n\n\n  is.startWith = function (string, target) {\n    return is.string(string) && string.indexOf(target) === 0;\n  }; // startWith method does not support 'all' and 'any' interfaces\n\n\n  is.startWith.api = ['not']; // is a given string all uppercase?\n\n  is.upperCase = function (string) {\n    return is.string(string) && string === string.toUpperCase();\n  }; // Time checks\n\n  /* -------------------------------------------------------------------------- */\n\n\n  var days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n  var months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']; // is a given dates day equal given day parameter?\n\n  is.day = function (date, day) {\n    return is.date(date) && day.toLowerCase() === days[date.getDay()];\n  }; // day method does not support 'all' and 'any' interfaces\n\n\n  is.day.api = ['not']; // is a given date in daylight saving time?\n\n  is.dayLightSavingTime = function (date) {\n    var january = new Date(date.getFullYear(), 0, 1);\n    var july = new Date(date.getFullYear(), 6, 1);\n    var stdTimezoneOffset = Math.max(january.getTimezoneOffset(), july.getTimezoneOffset());\n    return date.getTimezoneOffset() < stdTimezoneOffset;\n  }; // is a given date future?\n\n\n  is.future = function (date) {\n    var now = new Date();\n    return is.date(date) && date.getTime() > now.getTime();\n  }; // is date within given range?\n\n\n  is.inDateRange = function (date, start, end) {\n    if (is.not.date(date) || is.not.date(start) || is.not.date(end)) {\n      return false;\n    }\n\n    var stamp = date.getTime();\n    return stamp > start.getTime() && stamp < end.getTime();\n  }; // inDateRange method does not support 'all' and 'any' interfaces\n\n\n  is.inDateRange.api = ['not']; // is a given date in last month range?\n\n  is.inLastMonth = function (date) {\n    return is.inDateRange(date, new Date(new Date().setMonth(new Date().getMonth() - 1)), new Date());\n  }; // is a given date in last week range?\n\n\n  is.inLastWeek = function (date) {\n    return is.inDateRange(date, new Date(new Date().setDate(new Date().getDate() - 7)), new Date());\n  }; // is a given date in last year range?\n\n\n  is.inLastYear = function (date) {\n    return is.inDateRange(date, new Date(new Date().setFullYear(new Date().getFullYear() - 1)), new Date());\n  }; // is a given date in next month range?\n\n\n  is.inNextMonth = function (date) {\n    return is.inDateRange(date, new Date(), new Date(new Date().setMonth(new Date().getMonth() + 1)));\n  }; // is a given date in next week range?\n\n\n  is.inNextWeek = function (date) {\n    return is.inDateRange(date, new Date(), new Date(new Date().setDate(new Date().getDate() + 7)));\n  }; // is a given date in next year range?\n\n\n  is.inNextYear = function (date) {\n    return is.inDateRange(date, new Date(), new Date(new Date().setFullYear(new Date().getFullYear() + 1)));\n  }; // is the given year a leap year?\n\n\n  is.leapYear = function (year) {\n    return is.number(year) && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0);\n  }; // is a given dates month equal given month parameter?\n\n\n  is.month = function (date, month) {\n    return is.date(date) && month.toLowerCase() === months[date.getMonth()];\n  }; // month method does not support 'all' and 'any' interfaces\n\n\n  is.month.api = ['not']; // is a given date past?\n\n  is.past = function (date) {\n    var now = new Date();\n    return is.date(date) && date.getTime() < now.getTime();\n  }; // is a given date in the parameter quarter?\n\n\n  is.quarterOfYear = function (date, quarter) {\n    return is.date(date) && is.number(quarter) && quarter === Math.floor((date.getMonth() + 3) / 3);\n  }; // quarterOfYear method does not support 'all' and 'any' interfaces\n\n\n  is.quarterOfYear.api = ['not']; // is a given date indicate today?\n\n  is.today = function (date) {\n    var now = new Date();\n    var todayString = now.toDateString();\n    return is.date(date) && date.toDateString() === todayString;\n  }; // is a given date indicate tomorrow?\n\n\n  is.tomorrow = function (date) {\n    var now = new Date();\n    var tomorrowString = new Date(now.setDate(now.getDate() + 1)).toDateString();\n    return is.date(date) && date.toDateString() === tomorrowString;\n  }; // is a given date weekend?\n  // 6: Saturday, 0: Sunday\n\n\n  is.weekend = function (date) {\n    return is.date(date) && (date.getDay() === 6 || date.getDay() === 0);\n  }; // is a given date weekday?\n\n\n  is.weekday = not(is.weekend); // is a given dates year equal given year parameter?\n\n  is.year = function (date, year) {\n    return is.date(date) && is.number(year) && year === date.getFullYear();\n  }; // year method does not support 'all' and 'any' interfaces\n\n\n  is.year.api = ['not']; // is a given date indicate yesterday?\n\n  is.yesterday = function (date) {\n    var now = new Date();\n    var yesterdayString = new Date(now.setDate(now.getDate() - 1)).toDateString();\n    return is.date(date) && date.toDateString() === yesterdayString;\n  }; // Environment checks\n\n  /* -------------------------------------------------------------------------- */\n\n\n  var freeGlobal = is.windowObject(typeof global == 'object' && global) && global;\n  var freeSelf = is.windowObject(typeof self == 'object' && self) && self;\n  var thisGlobal = is.windowObject(typeof this == 'object' && this) && this;\n  var root = freeGlobal || freeSelf || thisGlobal || Function('return this')();\n  var document = freeSelf && freeSelf.document;\n  var previousIs = root.is; // store navigator properties to use later\n\n  var navigator = freeSelf && freeSelf.navigator;\n  var appVersion = (navigator && navigator.appVersion || '').toLowerCase();\n  var userAgent = (navigator && navigator.userAgent || '').toLowerCase();\n  var vendor = (navigator && navigator.vendor || '').toLowerCase(); // is current device android?\n\n  is.android = function () {\n    return /android/.test(userAgent);\n  }; // android method does not support 'all' and 'any' interfaces\n\n\n  is.android.api = ['not']; // is current device android phone?\n\n  is.androidPhone = function () {\n    return /android/.test(userAgent) && /mobile/.test(userAgent);\n  }; // androidPhone method does not support 'all' and 'any' interfaces\n\n\n  is.androidPhone.api = ['not']; // is current device android tablet?\n\n  is.androidTablet = function () {\n    return /android/.test(userAgent) && !/mobile/.test(userAgent);\n  }; // androidTablet method does not support 'all' and 'any' interfaces\n\n\n  is.androidTablet.api = ['not']; // is current device blackberry?\n\n  is.blackberry = function () {\n    return /blackberry/.test(userAgent) || /bb10/.test(userAgent);\n  }; // blackberry method does not support 'all' and 'any' interfaces\n\n\n  is.blackberry.api = ['not']; // is current browser chrome?\n  // parameter is optional\n\n  is.chrome = function (range) {\n    var match = /google inc/.test(vendor) ? userAgent.match(/(?:chrome|crios)\\/(\\d+)/) : null;\n    return match !== null && compareVersion(match[1], range);\n  }; // chrome method does not support 'all' and 'any' interfaces\n\n\n  is.chrome.api = ['not']; // is current device desktop?\n\n  is.desktop = function () {\n    return is.not.mobile() && is.not.tablet();\n  }; // desktop method does not support 'all' and 'any' interfaces\n\n\n  is.desktop.api = ['not']; // is current browser edge?\n  // parameter is optional\n\n  is.edge = function (range) {\n    var match = userAgent.match(/edge\\/(\\d+)/);\n    return match !== null && compareVersion(match[1], range);\n  }; // edge method does not support 'all' and 'any' interfaces\n\n\n  is.edge.api = ['not']; // is current browser firefox?\n  // parameter is optional\n\n  is.firefox = function (range) {\n    var match = userAgent.match(/(?:firefox|fxios)\\/(\\d+)/);\n    return match !== null && compareVersion(match[1], range);\n  }; // firefox method does not support 'all' and 'any' interfaces\n\n\n  is.firefox.api = ['not']; // is current browser internet explorer?\n  // parameter is optional\n\n  is.ie = function (range) {\n    var match = userAgent.match(/(?:msie |trident.+?; rv:)(\\d+)/);\n    return match !== null && compareVersion(match[1], range);\n  }; // ie method does not support 'all' and 'any' interfaces\n\n\n  is.ie.api = ['not']; // is current device ios?\n\n  is.ios = function () {\n    return is.iphone() || is.ipad() || is.ipod();\n  }; // ios method does not support 'all' and 'any' interfaces\n\n\n  is.ios.api = ['not']; // is current device ipad?\n  // parameter is optional\n\n  is.ipad = function (range) {\n    var match = userAgent.match(/ipad.+?os (\\d+)/);\n    return match !== null && compareVersion(match[1], range);\n  }; // ipad method does not support 'all' and 'any' interfaces\n\n\n  is.ipad.api = ['not']; // is current device iphone?\n  // parameter is optional\n\n  is.iphone = function (range) {\n    // original iPhone doesn't have the os portion of the UA\n    var match = userAgent.match(/iphone(?:.+?os (\\d+))?/);\n    return match !== null && compareVersion(match[1] || 1, range);\n  }; // iphone method does not support 'all' and 'any' interfaces\n\n\n  is.iphone.api = ['not']; // is current device ipod?\n  // parameter is optional\n\n  is.ipod = function (range) {\n    var match = userAgent.match(/ipod.+?os (\\d+)/);\n    return match !== null && compareVersion(match[1], range);\n  }; // ipod method does not support 'all' and 'any' interfaces\n\n\n  is.ipod.api = ['not']; // is current operating system linux?\n\n  is.linux = function () {\n    return /linux/.test(appVersion);\n  }; // linux method does not support 'all' and 'any' interfaces\n\n\n  is.linux.api = ['not']; // is current operating system mac?\n\n  is.mac = function () {\n    return /mac/.test(appVersion);\n  }; // mac method does not support 'all' and 'any' interfaces\n\n\n  is.mac.api = ['not']; // is current device mobile?\n\n  is.mobile = function () {\n    return is.iphone() || is.ipod() || is.androidPhone() || is.blackberry() || is.windowsPhone();\n  }; // mobile method does not support 'all' and 'any' interfaces\n\n\n  is.mobile.api = ['not']; // is current state offline?\n\n  is.offline = not(is.online); // offline method does not support 'all' and 'any' interfaces\n\n  is.offline.api = ['not']; // is current state online?\n\n  is.online = function () {\n    return !navigator || navigator.onLine === true;\n  }; // online method does not support 'all' and 'any' interfaces\n\n\n  is.online.api = ['not']; // is current browser opera?\n  // parameter is optional\n\n  is.opera = function (range) {\n    var match = userAgent.match(/(?:^opera.+?version|opr)\\/(\\d+)/);\n    return match !== null && compareVersion(match[1], range);\n  }; // opera method does not support 'all' and 'any' interfaces\n\n\n  is.opera.api = ['not']; // is current browser phantomjs?\n  // parameter is optional\n\n  is.phantom = function (range) {\n    var match = userAgent.match(/phantomjs\\/(\\d+)/);\n    return match !== null && compareVersion(match[1], range);\n  }; // phantom method does not support 'all' and 'any' interfaces\n\n\n  is.phantom.api = ['not']; // is current browser safari?\n  // parameter is optional\n\n  is.safari = function (range) {\n    var match = userAgent.match(/version\\/(\\d+).+?safari/);\n    return match !== null && compareVersion(match[1], range);\n  }; // safari method does not support 'all' and 'any' interfaces\n\n\n  is.safari.api = ['not']; // is current device tablet?\n\n  is.tablet = function () {\n    return is.ipad() || is.androidTablet() || is.windowsTablet();\n  }; // tablet method does not support 'all' and 'any' interfaces\n\n\n  is.tablet.api = ['not']; // is current device supports touch?\n\n  is.touchDevice = function () {\n    return !!document && ('ontouchstart' in freeSelf || 'DocumentTouch' in freeSelf && document instanceof DocumentTouch);\n  }; // touchDevice method does not support 'all' and 'any' interfaces\n\n\n  is.touchDevice.api = ['not']; // is current operating system windows?\n\n  is.windows = function () {\n    return /win/.test(appVersion);\n  }; // windows method does not support 'all' and 'any' interfaces\n\n\n  is.windows.api = ['not']; // is current device windows phone?\n\n  is.windowsPhone = function () {\n    return is.windows() && /phone/.test(userAgent);\n  }; // windowsPhone method does not support 'all' and 'any' interfaces\n\n\n  is.windowsPhone.api = ['not']; // is current device windows tablet?\n\n  is.windowsTablet = function () {\n    return is.windows() && is.not.windowsPhone() && /touch/.test(userAgent);\n  }; // windowsTablet method does not support 'all' and 'any' interfaces\n\n\n  is.windowsTablet.api = ['not']; // Object checks\n\n  /* -------------------------------------------------------------------------- */\n  // has a given object got parameterized count property?\n\n  is.propertyCount = function (object, count) {\n    if (is.not.object(object) || is.not.number(count)) {\n      return false;\n    }\n\n    var n = 0;\n\n    for (var property in object) {\n      if (hasOwnProperty.call(object, property) && ++n > count) {\n        return false;\n      }\n    }\n\n    return n === count;\n  }; // propertyCount method does not support 'all' and 'any' interfaces\n\n\n  is.propertyCount.api = ['not']; // is given object has parameterized property?\n\n  is.propertyDefined = function (object, property) {\n    return is.object(object) && is.string(property) && property in object;\n  }; // propertyDefined method does not support 'all' and 'any' interfaces\n\n\n  is.propertyDefined.api = ['not']; // Array checks\n\n  /* -------------------------------------------------------------------------- */\n  // is a given item in an array?\n\n  is.inArray = function (value, array) {\n    if (is.not.array(array)) {\n      return false;\n    }\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] === value) {\n        return true;\n      }\n    }\n\n    return false;\n  }; // inArray method does not support 'all' and 'any' interfaces\n\n\n  is.inArray.api = ['not']; // is a given array sorted?\n\n  is.sorted = function (array, sign) {\n    if (is.not.array(array)) {\n      return false;\n    }\n\n    var predicate = comparator[sign] || comparator['>='];\n\n    for (var i = 1; i < array.length; i++) {\n      if (!predicate(array[i], array[i - 1])) {\n        return false;\n      }\n    }\n\n    return true;\n  }; // API\n  // Set 'not', 'all' and 'any' interfaces to methods based on their api property\n\n  /* -------------------------------------------------------------------------- */\n\n\n  function setInterfaces() {\n    var options = is;\n\n    for (var option in options) {\n      if (hasOwnProperty.call(options, option) && is['function'](options[option])) {\n        var interfaces = options[option].api || ['not', 'all', 'any'];\n\n        for (var i = 0; i < interfaces.length; i++) {\n          if (interfaces[i] === 'not') {\n            is.not[option] = not(is[option]);\n          }\n\n          if (interfaces[i] === 'all') {\n            is.all[option] = all(is[option]);\n          }\n\n          if (interfaces[i] === 'any') {\n            is.any[option] = any(is[option]);\n          }\n        }\n      }\n    }\n  }\n\n  setInterfaces(); // Configuration methods\n  // Intentionally added after setInterfaces function\n\n  /* -------------------------------------------------------------------------- */\n  // change namespace of library to prevent name collisions\n  // var preferredName = is.setNamespace();\n  // preferredName.odd(3);\n  // => true\n\n  is.setNamespace = function () {\n    root.is = previousIs;\n    return this;\n  }; // set optional regexes to methods\n\n\n  is.setRegexp = function (regexp, name) {\n    for (var r in regexes) {\n      if (hasOwnProperty.call(regexes, r) && name === r) {\n        regexes[r] = regexp;\n      }\n    }\n  };\n\n  return is;\n});"],"sourceRoot":""}