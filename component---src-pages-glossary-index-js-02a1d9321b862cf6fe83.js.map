{"version":3,"sources":["webpack:///./src/pages/glossary/index.js"],"names":["IndexRoute","slug","value","Slugger","render","edges","this","props","data","allMarkdownRemark","groupedByAlphabet","map","item","index","firstLetter","node","frontmatter","title","charAt","undefined","push","allLetters","Object","keys","className","GatsbyConfig","siteMetadata","letter","key","href","id","dangerouslySetInnerHTML","__html","html","React","Component","pageQuery"],"mappings":"4PASMA,E,wLACJC,KAAA,SAAKC,GACH,OAAO,IAAIC,KAAUF,KAAKC,I,EAG5BE,OAAA,WAAU,IAAD,OACCC,EAAUC,KAAKC,MAAMC,KAAKC,kBAA1BJ,MAEFK,EAAoB,GAE1BL,EAAMM,KAAI,SAACC,EAAMC,GACf,IAAMC,EAAcF,EAAKG,KAAKC,YAAYC,MAAMC,OAAO,GAEjBC,MAAlCT,EAAkBI,KACpBJ,EAAkBI,GAAe,IAGnCJ,EAAkBI,GAAaM,KAAKR,MAGtC,IAAMS,EAAaC,OAAOC,KAAKb,GAE/B,OACE,yBAAKc,UAAU,oBACb,kBAAC,IAAD,CAAQP,MAAK,cAAgBQ,IAAaC,aAAaT,QACvD,yBAAKO,UAAU,WACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,iBACZH,EAAWV,KAAI,SAACgB,EAAQd,GACvB,OACE,yBAAKW,UAAU,mBAAmBI,IAAKf,GACrC,wBAAIW,UAAU,yCACXG,GAEH,wBAAIH,UAAU,yCACXd,EAAkBiB,GAAQhB,KAAI,SAACC,EAAMC,GACpC,OACE,wBAAIW,UAAU,gBAAgBI,IAAKf,GACjC,uBACEgB,KAAI,IAAM,EAAK5B,KACbW,EAAKG,KAAKC,YAAYC,QAGvBL,EAAKG,KAAKC,YAAYC,mBAa7C,yBAAKO,UAAU,kBACb,wCACCnB,EAAMM,KAAI,SAACC,EAAMC,GAChB,OACE,yBACEW,UAAU,oBACVI,IAAKhB,EAAKG,KAAKC,YAAYC,OAE3B,wBAAIa,GAAI,EAAK7B,KAAKW,EAAKG,KAAKC,YAAYC,QACrCL,EAAKG,KAAKC,YAAYC,OAEzB,yBAAKc,wBAAyB,CAAEC,OAAQpB,EAAKG,KAAKkB,e,GAnEzCC,IAAMC,WA6EhBnC,YAER,IAAMoC,EAAS","file":"component---src-pages-glossary-index-js-02a1d9321b862cf6fe83.js","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport Link from \"gatsby-link\";\nimport GatsbyConfig from \"../../../gatsby-config\";\nimport { graphql } from \"gatsby\";\nimport Slugger from \"github-slugger\";\n\nimport \"./glossary.scss\";\n\nclass IndexRoute extends React.Component {\n  slug(value) {\n    return new Slugger().slug(value);\n  }\n\n  render() {\n    const { edges } = this.props.data.allMarkdownRemark;\n\n    const groupedByAlphabet = {};\n\n    edges.map((item, index) => {\n      const firstLetter = item.node.frontmatter.title.charAt(0);\n\n      if (groupedByAlphabet[firstLetter] == undefined) {\n        groupedByAlphabet[firstLetter] = [];\n      }\n\n      groupedByAlphabet[firstLetter].push(item);\n    });\n\n    const allLetters = Object.keys(groupedByAlphabet);\n\n    return (\n      <div className=\"glossary article\">\n        <Helmet title={`Glossary | ${GatsbyConfig.siteMetadata.title}`} />\n        <div className=\"sidebar\">\n          <div className=\"sidebar__wrapper\">\n            <div className=\"sidebar__body\">\n              {allLetters.map((letter, index) => {\n                return (\n                  <div className=\"sidebar__section\" key={index}>\n                    <h3 className=\"sidebar__title sidebar__title--active\">\n                      {letter}\n                    </h3>\n                    <ul className=\"sidebar__items sidebar__items--active\">\n                      {groupedByAlphabet[letter].map((item, index) => {\n                        return (\n                          <li className=\"sidebar__item\" key={index}>\n                            <a\n                              href={`#${this.slug(\n                                item.node.frontmatter.title\n                              )}`}\n                            >\n                              {item.node.frontmatter.title}\n                            </a>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"article__inner\">\n          <h1>Glossary</h1>\n          {edges.map((item, index) => {\n            return (\n              <div\n                className=\"glossary__wrapper\"\n                key={item.node.frontmatter.title}\n              >\n                <h2 id={this.slug(item.node.frontmatter.title)}>\n                  {item.node.frontmatter.title}\n                </h2>\n                <div dangerouslySetInnerHTML={{ __html: item.node.html }} />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default IndexRoute;\n\nexport const pageQuery = graphql`\n  query glossaryIndexQuery {\n    allMarkdownRemark(\n      filter: { frontmatter: { path: { regex: \"/glossary/\" } } }\n      sort: { order: ASC, fields: [frontmatter___title] }\n      limit: 1000\n    ) {\n      edges {\n        node {\n          html\n          frontmatter {\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}